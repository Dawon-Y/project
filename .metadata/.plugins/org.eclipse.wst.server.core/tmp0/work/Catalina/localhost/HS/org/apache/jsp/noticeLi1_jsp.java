/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.33
 * Generated at: 2024-12-08 07:49:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;

public final class noticeLi1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

    // 세션을 가져오고, 세션이 없을 경우 null 처리
    HttpSession userSession = request.getSession(false); // 세션이 없을 경우 null 반환
    String userType = null;
    Boolean isLoggedIn = false;
    String previousPage = null;

    if (userSession != null) {
        // 세션에서 필요한 값들 가져오기
        userType = (String) userSession.getAttribute("userType");
        isLoggedIn = (Boolean) userSession.getAttribute("isLoggedIn");
        previousPage = (String) userSession.getAttribute("previousPage");
    }

    // 로그인되지 않았을 경우 기본값 설정 (guest)
    if (userSession == null || !Boolean.TRUE.equals(isLoggedIn)) {
        isLoggedIn = false; // 로그인되지 않은 상태
        userType = "guest"; // 기본값으로 guest 설정
    }

    // 이전 페이지에 맞는 헤더 로드
    if (previousPage != null) {
        if ("notice".equals(previousPage)) {
            // 로그인된 경우 헤더를 로그인된 상태로 표시
            if (Boolean.TRUE.equals(isLoggedIn)) {
                if ("admin".equals(userType)) {
                    request.getRequestDispatcher("HeaderAdminLogin.jsp").include(request, response);
                } else if ("student".equals(userType)) {
                    request.getRequestDispatcher("HeaderStudentLogin.jsp").include(request, response);
                }
            } else {
                // 로그인되지 않은 경우 헤더를 비로그인 상태로 표시
                request.getRequestDispatcher("HeaderStudent.jsp").include(request, response); // 기본 헤더는 HeaderStudent.jsp
            }
        }
    } else {
        // 기본적으로 사용자 타입에 맞는 헤더 로딩
        if (Boolean.TRUE.equals(isLoggedIn)) {
            // 로그인된 상태에서 헤더 처리
            if ("admin".equals(userType)) {
                request.getRequestDispatcher("HeaderAdminLogin.jsp").include(request, response);
            } else if ("student".equals(userType)) {
                request.getRequestDispatcher("HeaderStudentLogin.jsp").include(request, response);
            }
        } else {
            // 로그인되지 않은 상태에서는 기본으로 Header.jsp를 로드
            request.getRequestDispatcher("Header.jsp").include(request, response);
        }
    }

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name = \"viewport\" content=\"width=device-width\", initial-scale=\"1\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100..900&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/noticeLi.css\">\r\n");
      out.write("<title>공지사항</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"contents\">\r\n");
      out.write("	<h2>공지사항</h2>\r\n");
      out.write("	<div class=\"notice\">\r\n");
      out.write("	<hr class= \"black\">\r\n");
      out.write("		<div class=\"subject\">\r\n");
      out.write("		<h3>2024학년도 겨울계절학기 안내</h3>\r\n");
      out.write("		<p>작성일 2024.11.02 | 작성자 학사지원팀</p>\r\n");
      out.write("	<hr>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<div class=\"write\">\r\n");
      out.write("		<h4>2024학년도 겨울계절학기 안내문</h4>\r\n");
      out.write("		<p>※ 컴퓨터공학부 내 트랙을 선택하고자 하는 학생은 트랙기초 과목(컴퓨터프로그래밍, 웹프로그래밍기초)에서 B0이상 받아야 선택 가능합니다.</p>\r\n");
      out.write("		<p>※ <사고와 표현> 재수강 서면신청 관련 안내 </span>\r\n");
      out.write("		<p>- 해당 과목 재수강을 희망하는 학생은 서면신청을 통해 수강신청 해야 합니다. </span>\r\n");
      out.write("		<p>- 수강신청 기간 내에 수강신청 정정원을 작성하여 이메일(312645@hansung.ac.kr)로 제출하여 주시기 바랍니다.(관련문의: 02-760-4354)</p>\r\n");
      out.write("		<p>※ 수강료 납부 및 고지서 확인기간(1차)변경 안내</span>\r\n");
      out.write("		<p>기존: 2024. 11. 25.(월) 00:00 ~ 11. 26.(화) 16:00 → 변경: 2024. 11. 26.(화) 00:00 ~ 11. 27.(수) 16:00 </p>\r\n");
      out.write("		\r\n");
      out.write("		<div class=\"mainContents\">\r\n");
      out.write("			<p class=\"bold\">1. 학사일정</p>\r\n");
      out.write("			<p>가. 수강신청 기간 : &nbsp;<a class=\"blue\">2024. 11. 19.(화) 10:00 ~ 11. 21.(목) 23:59 / 3일간 온라인 신청</a></p>\r\n");
      out.write("			<p>나. 폐강 공고(1차) : 2024. 11. 22.(금) &nbsp;<a class=\"red\">1차 폐강 (예정)</a></p>\r\n");
      out.write("			<p>다. 수강료 납부 및 고지서 확인기간(1차) : &nbsp;<a class=\"blue\">2024. 11. 26.(화) 00:00 ~ 11. 27.(수) 16:00 / 2일간</a></p>\r\n");
      out.write("			<p>라. 1차 폐강 이후 수강신청 정정 접수 기간 :&nbsp;<a class=\"blue\">2024. 11. 28.(목) 10:00 ~ 11. 29.(금) 23:59 / 2일간 방문 및 메일 신청(haksa@hansung.ac.kr)</a></p>\r\n");
      out.write("			<p>마. 수강료 납부 및 고지서 확인기간(2차) : &nbsp;<a class=\"blue\">2024. 12. 3.(화) 00:00 ~ 12. 4.(수) 16:00 / 2일간</a></p>\r\n");
      out.write("			<p>바. 폐강 공고(2차) : 2024. 12. 6.(금) &nbsp;<a class=\"red\">2차 폐강 (예정)</a></p>\r\n");
      out.write("			<p>사. 폐강교과목 수강신청 정정 : &nbsp;<a class=\"blue\">2024. 12. 9.(월) 10:00 ~ 12. 10.(화) 23:59 / 2일간 방문 및 메일 신청(haksa@hansung.ac.kr)</a></p>\r\n");
      out.write("			<p>※ 수강신청한 과목이 폐강한 경우, 수강정정 가능.</p>\r\n");
      out.write("			<p>※ 1-2차 기간에 수강신청 후 수강료를 납부한 학생도 원하면 수강정정 가능.(수강취소는 불가능)</p>\r\n");
      out.write("			<p>※ 계절학기 수강신청을 놓친 학생도 신규 수강신청 가능.</p>\r\n");
      out.write("			<p>아. 수강료 납부 및 고지서 확인기간(3차) : &nbsp;<a class=\"blue\">2024. 12. 12.(목) 00:00 ~ 12. 13.(금) 16:00 / 2일간</a></p>\r\n");
      out.write("			<p>※ 12/9~12/10에 신규 수강신청을 한 학생도 수강료 납부.</p>\r\n");
      out.write("			<p>※ 12/9~12/10에 수강정정으로 차액을 추가로 납부해야 하는 학생도 수강료 납부.</p>\r\n");
      out.write("			<p>※ 수강료 납부(3차) 기간까지 수강료를 납부 완료하지 않은 학생은 추후 수강신청 취소로 처리됨.</p>\r\n");
      out.write("			<p>자. 계절학기 수업기간 : &nbsp;<a class=\"red\">2024. 12. 23.(월) ~ 2025. 1. 14.(화) / 15일간</a></p>\r\n");
      out.write("			<p class=\"bold\">2. 수강신청방법</p>\r\n");
      out.write("			<p>가. 본교생</p>\r\n");
      out.write("			<p>① 한성대 [종합정보시스템] 로그인 → [계절학기] → [계절학기수강신청] 클릭</p>\r\n");
      out.write("			<p>② [과목전공] 클릭 → 수강과목 직접 신청(주·야간 교차수강 가능)</p>\r\n");
      out.write("			<p>③ 하단의 [2024학년도 겨울학기 수강신청 내역] 확인 → 수강료 납부(납부 방법은 하단 참조)</p>\r\n");
      out.write("			<p>※ 수강신청은 수강료를 납부하여야 완료되며 &nbsp;<a class=\"redLine\">수강료 납부 시 수강신청한 과목이 폐강된 경우와 개설 가능</a></p>\r\n");
      out.write("			<p><a class=\"redLine\">기준을 초과한 인원에 대해서만 선착순으로 수강취소 및 수강료 반환을 허용하며, 개강 후에는 절대 취소/정정 및 환불 불가</a></p>\r\n");
      out.write("			<p class=\"bold\">3. 수강료 납부방법</p>\r\n");
      out.write("			<p>가. 수강료 : 시간당 80.000원</p>\r\n");
      out.write("			<p>- 오프라인 강좌는 수업시간에 따라 부과 / 시간당 80,000원으로 계산함.</p>\r\n");
      out.write("			<p>예) 3학점 3시간 240,000원, 2학점 3시간 240,000원, 2학점 2시간 160,000원.</p>\r\n");
      out.write("			<p>- 온라인 강좌는 학점에 따라 부과 / 학점당 80,000원으로 계산함.</p>\r\n");
      out.write("			<p><a class=\"red\">※</a>&nbsp;<a class=\"redLine\">개설 가능 기준을 초과한 인원에 대해서만 선착순으로 수강취소 및 수강료 반환(개강 후 절대 환불 불가).</a></p>\r\n");
      out.write("			<p><a class=\"redLine\">단, 천재지변, 폐강, 입원 등 수강이 불가할 경우에 환불을 허용함(수강료 납부 시 신중을 기해야 함)</a></p>\r\n");
      out.write("			<p>나. 납부방법</p>\r\n");
      out.write("			<p>① 본교생 : 한성대 [종합정보시스템] 로그인 → [계절학기] → [수강신청서(출력)] 클릭 → 팝업창에 표기된 계좌번호로 입금</p>\r\n");
      out.write("			<p>② 타대생 : 한성대 [종합정보시스템] 로그인 → [교무] → [수강신청] → 수강신청서 출력 우측의 [인쇄] 버튼 클릭 → 팝업창에 표기된 계좌번호로 입금</p>\r\n");
      out.write("			<p>다. 납부확인 방법</p>\r\n");
      out.write("			<p>① 본교생 : 한성대 [종합정보시스템] 로그인 → [계절학기] → [계절학기수납내역]에서 확인</p>\r\n");
      out.write("			<p>② 타대생 : 한성대 [종합정보시스템] 로그인 → [교무] → [수강신청] → 하단 [수강신청내역]</p>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("		<div class=\"attach\">\r\n");
      out.write("		    <div class=\"left\">첨부파일</div>\r\n");
      out.write("		    <div class=\"attachList\">\r\n");
      out.write("		        <p>- <a href=\"https://drive.usercontent.google.com/u/3/uc?id=12giEFjhCrmoEzpeaDVN7jCNBMpneoxY1&export=download\">수강신청 정정원_겨울계절학기.hwp <img src=\"img/attach.png\" alt=\"바로가기 아이콘\"></a></p>\r\n");
      out.write("		        <p>- <a href=\"https://drive.usercontent.google.com/u/3/uc?id=17I2CByBour9dkNJCBxuc5eS3M3HrjjFf&export=download\">2024학년도 겨울계절학기 안내문.hwp <img src=\"img/attach.png\" alt=\"바로가기 아이콘\"></a></p>\r\n");
      out.write("		    </div>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("	<div class=\"listBtnContainer\"><a href=\"Notice.jsp\" class=\"listBtn\">목록</a></div>\r\n");
      out.write("	\r\n");
      out.write("</div>\r\n");
      out.write("<footer>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("	<div class=\"section1\">개인정보처리방침</div>\r\n");
      out.write("	<div class=\"section2\">\r\n");
      out.write("		주소: [02876] 서울특별시 성북구 삼선교로 16길 116(삼선동2가)  Tel : 02-760-4114<br>\r\n");
      out.write("		Copyright 2024. HANSUNG UNIVERSITY All Rights Reserved.</div>\r\n");
      out.write("	<div class=\"section3\"><p><img src=\"img/logo.png\" alt=\"한성대 로고\"></p></div>\r\n");
      out.write("</div>\r\n");
      out.write("</footer>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
