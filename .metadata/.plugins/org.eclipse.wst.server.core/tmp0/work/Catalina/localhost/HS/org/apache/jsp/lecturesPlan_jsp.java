/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.33
 * Generated at: 2024-12-05 14:46:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import dto.lecture;
import dao.lectures;
import java.util.*;

public final class lecturesPlan_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/Footer.jsp", Long.valueOf(1733141697245L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("dto.lecture");
    _jspx_imports_classes.add("dao.lectures");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    // 세션을 가져오고, 세션이 없을 경우 null 처리
    HttpSession userSession = request.getSession(false); // 세션이 없을 경우 null 반환
    String userType = null;
    Boolean isLoggedIn = false;
    String previousPage = null;

    if (userSession != null) {
        // 세션에서 필요한 값들 가져오기
        userType = (String) userSession.getAttribute("userType");
        isLoggedIn = (Boolean) userSession.getAttribute("isLoggedIn");
        previousPage = (String) userSession.getAttribute("previousPage");
    }

    // 로그인되지 않았을 경우 기본값 설정 (guest)
    if (userSession == null || !Boolean.TRUE.equals(isLoggedIn)) {
        isLoggedIn = false; // 로그인되지 않은 상태
        userType = "guest"; // 기본값으로 guest 설정
    }

    // 이전 페이지에 맞는 헤더 로드
    if (previousPage != null) {
        if ("notice".equals(previousPage)) {
            // 로그인된 경우 헤더를 로그인된 상태로 표시
            if (Boolean.TRUE.equals(isLoggedIn)) {
                if ("admin".equals(userType)) {
                    request.getRequestDispatcher("HeaderAdminLogin.jsp").include(request, response);
                } else if ("student".equals(userType)) {
                    request.getRequestDispatcher("HeaderStudentLogin.jsp").include(request, response);
                }
            } else {
                // 로그인되지 않은 경우 헤더를 비로그인 상태로 표시
                request.getRequestDispatcher("HeaderStudent.jsp").include(request, response); // 기본 헤더는 HeaderStudent.jsp
            }
        }
    } else {
        // 기본적으로 사용자 타입에 맞는 헤더 로딩
        if (Boolean.TRUE.equals(isLoggedIn)) {
            // 로그인된 상태에서 헤더 처리
            if ("admin".equals(userType)) {
                request.getRequestDispatcher("HeaderAdminLogin.jsp").include(request, response);
            } else if ("student".equals(userType)) {
                request.getRequestDispatcher("HeaderStudentLogin.jsp").include(request, response);
            }
        } else {
            // 로그인되지 않은 상태에서는 기본으로 Header.jsp를 로드
            request.getRequestDispatcher("Header.jsp").include(request, response);
        }
    }

      out.write("\n");
      out.write("\n");
      out.write("   \n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n");
      out.write("<style>\n");
      out.write("body {\n");
      out.write("margin-top : 10%;\n");
      out.write("}\n");
      out.write("#listTable {\n");
      out.write("width : 80%;\n");
      out.write("font-size : 18px;\n");
      out.write("border-collapse : collapse;\n");
      out.write("text-align : center;\n");
      out.write("margin-left : auto;\n");
      out.write("margin-right : auto;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#listTr {\n");
      out.write("border : 1px;\n");
      out.write("font-size : 19px;\n");
      out.write("height : 35px;\n");
      out.write("color : #353D89;\n");
      out.write("border-bottom : 1px solid black;\n");
      out.write("border-top : 1px solid black;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#listLecTr { \n");
      out.write("border : 1px;\n");
      out.write("font-size : 15px;\n");
      out.write("height : 40px;\n");
      out.write("border-bottom : 1px solid #D1D3D4;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#planButton {\n");
      out.write("background : #00AC28;\n");
      out.write("border-radius :5px;\n");
      out.write("border-color : #00AC28;\n");
      out.write("border: none;\n");
      out.write("font-size : 15px;\n");
      out.write("color : white;\n");
      out.write("height : 28px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#planTitle {\n");
      out.write("font-size : 25px;\n");
      out.write("margin-left : 10%;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#planHr {\n");
      out.write("border : 0px;\n");
      out.write("height : 2px;\n");
      out.write("background : #353D89;\n");
      out.write("width : 15px;\n");
      out.write("margin-left : 10%;\n");
      out.write(" }\n");
      out.write("</style>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>수강 과목 조회 페이지 (2171030 남유진)</title>\n");
      out.write("\n");
      out.write("<script> \n");
      out.write("function showLecturesPlansPage() { \n");
      out.write("	window.open(\"lecturesPlansPage.jsp\",\"lecturesPlansPage\",\"width = 800, height = 1200, top = 100, left = 800\");\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<hr id = \"planHr\">\n");
      out.write("<p id = \"planTitle\"> 과목 조회 </p>\n");
      out.write("\n");
      out.write("<form>\n");
      out.write("<table id = \"listTable\"> \n");
      out.write("\n");
      out.write("<tr id = \"listTr\"> \n");
      out.write("<td> 트랙 \n");
      out.write("<td> 코드  \n");
      out.write("<td> 학점 \n");
      out.write("<td> 학년 \n");
      out.write("<td> 이름 \n");
      out.write("<td> 분류 \n");
      out.write("<td> 분반 \n");
      out.write("<td> 교수 \n");
      out.write("<td> 교실 \n");
      out.write("<td> 수업1\n");
      out.write("<td> 시작1 \n");
      out.write("<td> 종료1 \n");
      out.write("<td> 수업2 \n");
      out.write("<td> 시작2 \n");
      out.write("<td> 종료2 \n");
      out.write("<td> 인원 \n");
      out.write("<td style = \"border-right : none;\"> 기능 \n");
      out.write("</tr>\n");
      out.write("\n");
 
lectures dao = lectures.getInstance();
ArrayList<lecture> lecturess = dao.getAllLectures();
for (int i = 0; i < lecturess.size(); i++) {
lecture lecture = lecturess.get(i);

      out.write("\n");
      out.write("<tr id = \"listLecTr\"> \n");
      out.write("<td> ");
      out.print(lecture.getLectureTrack() );
      out.write(" </td> \n");
      out.write("<td> ");
      out.print(lecture.getLectureCode() );
      out.write(" </td> \n");
      out.write("<td> ");
      out.print(lecture.getLectureCredit() );
      out.write(" </td>  \n");
      out.write("<td> ");
      out.print(lecture.getLectureGrade() );
      out.write(" </td>  \n");
      out.write("<td id = \"Lecname\"> ");
      out.print(lecture.getLectureName() );
      out.write(" </td>  \n");
      out.write("<td> ");
      out.print(lecture.getLectureSort() );
      out.write(" </td>  \n");
      out.write("<td> ");
      out.print(lecture.getLectureDivision() );
      out.write(" </td>  \n");
      out.write("<td> ");
      out.print(lecture.getLectureProf() );
      out.write(" </td>  \n");
      out.write("<td> ");
      out.print(lecture.getLectureClassRoom() );
      out.write(" </td>  \n");
      out.write("<td> ");
      out.print(lecture.getLectureDay1() );
      out.write(" </td>  \n");
      out.write("<td> ");
      out.print(lecture.getLectureStart1() );
      out.write(" </td>  \n");
      out.write("<td> ");
      out.print(lecture.getLectureEnd1() );
      out.write(" </td>  \n");
      out.write("<td> ");
      out.print(lecture.getLectureDay2() );
      out.write(" </td> \n");
      out.write("<td> ");
      out.print(lecture.getLectureStart2() );
      out.write(" </td>  \n");
      out.write("<td> ");
      out.print(lecture.getLectureEnd2() );
      out.write(" </td> \n");
      out.write("<td> ");
      out.print(lecture.getLecturePeople() );
      out.write(" </td>  \n");
      out.write("<td> <input id = \"planButton\" type = \"button\" value = \"강의 계획서\" onclick \n");
      out.write("= \"javacript:window.open('lecturesPlansPage.jsp?index=");
      out.print(i);
      out.write("','lecturesPlansPage','width = 800, height = 700, top=180, left = 400')\"> </input>\n");
}
      out.write("\n");
      out.write("</tr>\n");
      out.write("</table>\n");
      out.write("</form>\n");
      out.write("</body>\n");
      out.write("<br><br><br><br><br>\n");
      out.write("<footer>\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<link href=\"css/Footer.css\" rel = \"stylesheet\">\n");
      out.write("</head>\n");
      out.write("<footer>\n");
      out.write("<div class=\"text\">\n");
      out.write("	<ul class=\"fText\">\n");
      out.write("	<li><p class=\"left\">개인정보처리방침</p></li>\n");
      out.write("	<li><p class=\"infor\">주소: [02876] 서울특별시 성북구 삼선교로 16길 116(삼선동2가)  Tel : 02-760-4114<br>\n");
      out.write("		Copyright 2024. HANSUNG UNIVERSITY All Rights Reserved.</p></li>\n");
      out.write("	</ul>\n");
      out.write("</div>\n");
      out.write("<div class=\"fLogo\"><p><img src=\"img/logo.png\" alt=\"한성대 로고\"></p></div>\n");
      out.write("</footer>\n");
      out.write("</html>");
      out.write("\n");
      out.write("</footer>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
