/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.33
 * Generated at: 2024-12-03 19:33:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;

public final class noticeLi4_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

    // 세션을 가져오고, 세션이 없을 경우 null 처리
    HttpSession userSession = request.getSession(false); // 세션이 없을 경우 null 반환
    String userType = null;
    Boolean isLoggedIn = false;
    String previousPage = null;

    if (userSession != null) {
        // 세션에서 필요한 값들 가져오기
        userType = (String) userSession.getAttribute("userType");
        isLoggedIn = (Boolean) userSession.getAttribute("isLoggedIn");
        previousPage = (String) userSession.getAttribute("previousPage");
    }

    // 로그인되지 않았을 경우 기본값 설정 (guest)
    if (userSession == null || !Boolean.TRUE.equals(isLoggedIn)) {
        isLoggedIn = false; // 로그인되지 않은 상태
        userType = "guest"; // 기본값으로 guest 설정
    }

    // 이전 페이지에 맞는 헤더 로드
    if (previousPage != null) {
        if ("notice".equals(previousPage)) {
            // 로그인된 경우 헤더를 로그인된 상태로 표시
            if (Boolean.TRUE.equals(isLoggedIn)) {
                if ("admin".equals(userType)) {
                    request.getRequestDispatcher("HeaderAdminLogin.jsp").include(request, response);
                } else if ("student".equals(userType)) {
                    request.getRequestDispatcher("HeaderStudentLogin.jsp").include(request, response);
                }
            } else {
                // 로그인되지 않은 경우 헤더를 비로그인 상태로 표시
                request.getRequestDispatcher("HeaderStudent.jsp").include(request, response); // 기본 헤더는 HeaderStudent.jsp
            }
        }
    } else {
        // 기본적으로 사용자 타입에 맞는 헤더 로딩
        if (Boolean.TRUE.equals(isLoggedIn)) {
            // 로그인된 상태에서 헤더 처리
            if ("admin".equals(userType)) {
                request.getRequestDispatcher("HeaderAdminLogin.jsp").include(request, response);
            } else if ("student".equals(userType)) {
                request.getRequestDispatcher("HeaderStudentLogin.jsp").include(request, response);
            }
        } else {
            // 로그인되지 않은 상태에서는 기본으로 Header.jsp를 로드
            request.getRequestDispatcher("Header.jsp").include(request, response);
        }
    }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name = \"viewport\" content=\"width=device-width\", initial-scale=\"1\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100..900&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/noticeLi4.css\">\r\n");
      out.write("<title>공지사항</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"contents\">\r\n");
      out.write("	<h2>공지사항</h2>\r\n");
      out.write("	<div class=\"notice\">\r\n");
      out.write("	<hr class= \"black\">\r\n");
      out.write("		<div class=\"subject\">\r\n");
      out.write("		<h3>2024학년도 2학기 수업평가 중간조사 시행 안내</h3>\r\n");
      out.write("		<p>작성일 2024.10.18 | 작성자 학사지원팀</p>\r\n");
      out.write("	<hr>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<div class=\"write\">\r\n");
      out.write("		<p>본 설문조사는 중간 수업 만족도와 요구를 파악하여 이번 학기 수업의 품질 개선하는 데 목적을 두었습니다.</p>\r\n");
      out.write("		<p>수업평가 중간조사는 응답률 제고와 유의미한 품질 개선을 위해 매학기 9주차에 실시하고 있습니다.(22-1학기부터 적용)</p>\r\n");
      out.write("		<p>통계법 제33조(비밀의 보호), 34조(통계종사자의 의무)에 의거하여 여러분의 의견은 보호될 것이며, 통계 작성 외의 목적으로 사용되지 않습니다.</p>\r\n");
      out.write("		<p>조사방법 및 기간을 다음과 같이 안내하오니 많은 참여 바랍니다.</p>\r\n");
      out.write("		\r\n");
      out.write("		<div class=\"mainContents\">\r\n");
      out.write("			<p><br>- 다 음 -</p>\r\n");
      out.write("			<p>1. 조사기간 : 2024.10.28.(월) 10:00 ~ 11.1.(금) 23:59</p>\r\n");
      out.write("			<p>2. 조사과목 : 2024학년도 2학기 수강 과목</span>\r\n");
      out.write("			<p>3. 조사방법 : 종합정보시스템 로그인→교무→수업평가 메뉴 선택→대상과목 클릭→평가 후 저장</p>\r\n");
      out.write("			<p>※ 설문응시자의 신상정보는 해당과목 교수님께서 절대 확인이 불가능합니다.</p>\r\n");
      out.write("			<p>※ 조사화면 안내</p>\r\n");
      out.write("			<p><img class=\"search\" src=\"img/search1.png\"></p>\r\n");
      out.write("			<p>① [종합정보시스템]에 로그인 한 뒤, [교무]메뉴의 [수업평가]를 클릭</p>\r\n");
      out.write("			<p>② 과목을 선택 후 평가항목 모두 응답</p>\r\n");
      out.write("			<p><img class=\"search\" src=\"img/search2.png\"></p>\r\n");
      out.write("			<p>③ 응답 후 반드시 [저장]버튼을 클릭하여 저장</p>\r\n");
      out.write("			<p><br><br>※ 수업평가 중간 조사는 본인이 수강하고 있는 강의의 개선을 위한 참고 자료로 활용되므로 진솔하게 평가하여 주시기 바랍니다.</p>\r\n");
      out.write("			<p>기타 자세한 문의사항이나 건의사항은 학사지원팀(☎760-4219)에 연락 바랍니다.</p>\r\n");
      out.write("		</div>\r\n");
      out.write("			<div class=\"attach\">\r\n");
      out.write("		    <div class=\"left\">첨부파일</div>\r\n");
      out.write("		    <div class=\"attachList\">\r\n");
      out.write("		        첨부파일이(가) 없습니다.\r\n");
      out.write("		    </div>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"listBtnContainer\"><a href=\"Notice.jsp\" class=\"listBtn\">목록</a></div>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("<footer>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("	<div class=\"section1\">개인정보처리방침</div>\r\n");
      out.write("	<div class=\"section2\">\r\n");
      out.write("		주소: [02876] 서울특별시 성북구 삼선교로 16길 116(삼선동2가)  Tel : 02-760-4114<br>\r\n");
      out.write("		Copyright 2024. HANSUNG UNIVERSITY All Rights Reserved.</div>\r\n");
      out.write("	<div class=\"section3\"><p><img src=\"img/logo.png\" alt=\"한성대 로고\"></p></div>\r\n");
      out.write("</div>\r\n");
      out.write("</footer>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
