/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.33
 * Generated at: 2024-12-03 20:53:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.ArrayList;
import java.util.List;

public final class findPwAdmin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

    // 사용자 데이터 초기화
    class User {
        private String userId;
        private String userPhone;
        private String userPw;

        public User(String userId, String userPhone, String userPw) {
            this.userId = userId;
            this.userPhone = userPhone;
            this.userPw = userPw;
        }

        public String getUserId() {
            return userId;
        }

        public String getUserPhone() {
            return userPhone;
        }

        public String getUserPw() {
            return userPw;
        }
    }

    // 사용자 리스트 초기화
    List<User> users = new ArrayList<>();
    users.add(new User("114300", "010-5656-7878", "YangDW012"));
    users.add(new User("114301", "010-1212-3434", "NamYJ123"));
    users.add(new User("114302", "010-5656-7878", "Yeon456"));

    // 요청 파라미터에서 값 가져오기
    String userId = request.getParameter("id");
    String phone = request.getParameter("phone");
    String foundPw = null;

    // 사용자 검색 로직
    if (userId != null && phone != null) {
        for (User user : users) {
            if (user.getUserId().equals(userId) && user.getUserPhone().equals(phone)) {
                foundPw = user.getUserPw();
                break;
            }
        }
    }

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>비밀번호 찾기</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Noto Sans KR', sans-serif;\r\n");
      out.write("            background-color: #f8f9fa;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        .container {\r\n");
      out.write("            margin: auto;\r\n");
      out.write("            width: 300px;\r\n");
      out.write("            background: white;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        h2 {\r\n");
      out.write("        margin-left: 8%;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        form {\r\n");
      out.write("            margin-left:8%;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        label {\r\n");
      out.write("            display: block;\r\n");
      out.write("            margin-bottom: 5px;\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("            padding-top: 5px;\r\n");
      out.write("            padding-right: 10px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        input {\r\n");
      out.write("            padding: 8px;\r\n");
      out.write("            margin-bottom: 15px;\r\n");
      out.write("            border: 1px solid #ccc;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .first {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            float: left;\r\n");
      out.write("            width: 90%;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .second {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            float: left;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        button {\r\n");
      out.write("            width: 90%;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            background-color: #204B8F;\r\n");
      out.write("            color: white;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .result {\r\n");
      out.write("            margin-top: 15px;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <h2>비밀번호 찾기</h2>\r\n");
      out.write("        <form method=\"post\">\r\n");
      out.write("            <div class=\"first\">\r\n");
      out.write("                <label for=\"id\">아이디:</label>\r\n");
      out.write("                <input type=\"text\" id=\"id\" name=\"id\" required placeholder=\"아이디 입력\">\r\n");
      out.write("            </div>\r\n");
      out.write("            \r\n");
      out.write("            <div class=\"second\">\r\n");
      out.write("                <label for=\"phone\">연락처:</label>\r\n");
      out.write("                <input type=\"text\" id=\"phone\" name=\"phone\" required placeholder=\"연락처 입력(- 포함)\">\r\n");
      out.write("            </div>\r\n");
      out.write("            <button type=\"submit\">비밀번호 찾기</button>\r\n");
      out.write("        </form>\r\n");
      out.write("        <div class=\"result\">\r\n");
      out.write("            ");
 if (userId != null && phone != null) { 
      out.write("\r\n");
      out.write("                ");
 if (foundPw != null) { 
      out.write("\r\n");
      out.write("                    <p style=\"font-size: 15px;\">");
      out.print( userId );
      out.write(" 님의 비밀번호는 <a style=\"color: blue; font-size: 18px;\">");
      out.print( foundPw );
      out.write("</a>입니다.</p>\r\n");
      out.write("                ");
 } else { 
      out.write("\r\n");
      out.write("                    <p style=\"color: red; text-align: center;\">일치하는 사용자가 없습니다.</p>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
