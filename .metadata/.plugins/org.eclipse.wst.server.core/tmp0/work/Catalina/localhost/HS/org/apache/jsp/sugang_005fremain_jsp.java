/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.33
 * Generated at: 2024-12-13 11:39:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class sugang_005fremain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100..900&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<title>수강신청 이월 학점 조회</title>\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("	margin: 10px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>  \r\n");
      out.write("\r\n");
      out.write("<form>\r\n");
      out.write("<p><img src=\"img/dot_2.gif\">&nbsp;<font color=\"blue\"><strong>수강신청 이월학점 조회</strong></font></p>\r\n");
      out.write("\r\n");
      out.write("<table width=710 border=1 cellpadding=\"0\" cellspacing=\"0\" bordercolor=\"#D0D8FF\" bordercolordark=\"white\" bordercolorlight=\"#086E35\">\r\n");
      out.write("  <tr bgcolor=\"#D0D8FF\" align=\"center\" height=30>\r\n");
      out.write("    <td width=100>순번</td>\r\n");
      out.write("    <td width=200>학년도</td>\r\n");
      out.write("    <td width=200>학기</td>\r\n");
      out.write("    <td width=200>이월학점</td>\r\n");
      out.write("  </tr> \r\n");
      out.write("\r\n");
      out.write("  <tr><td colspan=4 height=30 align=center>해당 자료가 존재하지 않습니다.</td></td>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<table border=0 cellPadding=0 cellSpacing=0 width=\"100%\">\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td height=\"30\"></td>\r\n");
      out.write("	</tr>\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td width=\"900\"><img src=\"img/dot_2.gif\">&nbsp;<font color=\"blue\"><strong>안내</strong></font></td>\r\n");
      out.write("	</tr>\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td height=\"10\"></td>\r\n");
      out.write("	</tr>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<table width=710 border=1 cellpadding=\"0\" cellspacing=\"0\" bordercolor=\"#D0D8FF\" bordercolordark=\"white\">\r\n");
      out.write("  <tr>\r\n");
      out.write("    <td>\r\n");
      out.write("    <div style=\"margin: 20px 20px;\">\r\n");
      out.write("    	<font size=2>\r\n");
      out.write("    	  1. 수강신청 기준학점에서 사용하지 않은 학점 중 최대 3학점까지 이월하여 사용할 수 있다.\r\n");
      out.write("    	  <br>\r\n");
      out.write("    	  <br> 2. 이월학점 소멸 및 제한   \r\n");
      out.write("    	  <br> - 이월된 학점을 사용하지 않는 경우에는 자동 소멸. 일부만 사용하더라도 남은 이월학점이 다음학기로 재이월 되지 않음\r\n");
      out.write("    	  <br> - 학기를 초과하여 등록하는 경우 이월학점은 자동 소멸\r\n");
      out.write("    	  <br>&nbsp;&nbsp;&nbsp;&nbsp;즉, 8학기 의무등록 학생이 8학기차에 잔여학점이 발생하였다 하더라도 초과학기인 9학기로 이월되지 않음 \r\n");
      out.write("    	  <br> - 자퇴나 제적시에도 이월학점은 자동 소멸\r\n");
      out.write("    	  <br>\r\n");
      out.write("    	  <br> 3. 예외사항\r\n");
      out.write("    	  <br> - 휴학이나 전과시에는 잔여학점이 소멸되지 않고 다음 학기로 이월하여 사용가능   \r\n");
      out.write("    	  <br> - 수강포기한 학점도 이월 가능\r\n");
      out.write("    	  <br>\r\n");
      out.write("    	  </font>\r\n");
      out.write("    	  </div>\r\n");
      out.write("    </td>\r\n");
      out.write("  </tr> \r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
